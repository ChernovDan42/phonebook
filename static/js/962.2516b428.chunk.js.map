{"version":3,"file":"static/js/962.2516b428.chunk.js","mappings":"yQAiGA,UAjFiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAkB,oBAAqB,mBAChDC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAAAC,GACRX,GAASY,EAAAA,EAAAA,IAASD,GACnB,IAEH,OACE,iCACE,SAAC,IAAD,CAAME,SAAU,KAAMC,UAAW,SAAUC,GAAI,EAA/C,8BAGA,SAAC,IAAD,CAAMC,GAAG,OAAOC,MAAM,SAASC,QAAQ,SAASH,GAAI,EAApD,UACE,SAAC,KAAD,CAAKC,GAAG,OAAOG,EAAG,EAAGC,QAAQ,KAAKC,EAAG,IAAKnB,OAAQA,EAAlD,UACE,iBAAMQ,SAAUN,EAAOkB,aAAvB,UACE,UAAC,IAAD,CAAQC,QAAS,EAAGN,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAWO,QAAQ,OAAnB,mBACA,SAAC,EAAAC,EAAD,CACEC,GAAG,OACHnB,KAAK,OACLoB,KAAK,OACLC,QAAQ,SACRC,SAAUzB,EAAO0B,aACjBC,MAAO3B,EAAOO,OAAOJ,KACrBL,OAAO,mBACP8B,OAAQ,CAAE9B,OAAQ,qBAClB+B,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAC,KAAD,YACE,SAAC,IAAD,CAAWX,QAAQ,QAAnB,4BACA,SAAC,EAAAC,EAAD,CACEC,GAAG,QACHnB,KAAK,QACLoB,KAAK,QACLC,QAAQ,SACRC,SAAUzB,EAAO0B,aACjBC,MAAO3B,EAAOO,OAAOH,MACrBN,OAAO,mBACP8B,OAAQ,CAAE9B,OAAQ,qBAClBiC,UAAQ,QAGZ,UAAC,KAAD,YACE,SAAC,IAAD,CAAWX,QAAQ,WAAnB,uBACA,SAAC,EAAAC,EAAD,CACEC,GAAG,WACHnB,KAAK,WACLoB,KAAK,WACLC,QAAQ,SACRC,SAAUzB,EAAO0B,aACjBC,MAAO3B,EAAOO,OAAOF,SACrBP,OAAO,mBACP8B,OAAQ,CAAE9B,OAAQ,qBAClB+B,QAAQ,0DACRC,MAAM,oHACNC,UAAQ,QAIZ,SAAC,IAAD,CAAQR,KAAK,SAASS,YAAY,SAASC,MAAM,OAAjD,mCAOR,SAAC,KAAD,CAASC,SAAS,gBAGvB,C,6KCvFGC,GAAOC,EAAAA,EAAAA,IAAW,SAAeC,EAAOxB,GAC1C,IAAQC,EAAkEuB,EAAlEvB,UAAWwB,EAAuDD,EAAvDC,MAAOC,EAAgDF,EAAhDE,QAASC,EAAuCH,EAAvCG,KAAMC,EAAiCJ,EAAjCI,MAAOC,EAA0BL,EAA1BK,KAAMC,EAAoBN,EAApBM,OAAWC,GAAjE,OAA0EP,EAA1E,GACMQ,EAAS,CACbC,QAAS,OACTC,cAAejC,EACfkC,WAAYV,EACZW,eAAgBV,EAChBW,SAAUV,EACVW,UAAWV,EACXW,SAAUV,EACVW,WAAYV,GAEd,OAAuBW,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,KAAD,QAAe1C,IAAAA,EAAK,MAAOgC,GAAWD,GACjE,IACDT,EAAK,YAAc,M","sources":["components/Pages/Register.jsx","../node_modules/@chakra-ui/layout/src/flex.tsx"],"sourcesContent":["import { useFormik } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n  useColorModeValue,\n  VStack,\n} from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/userOperations';\nimport { Toaster } from 'react-hot-toast';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  const border = useColorModeValue('1px solid #805AD5', '1px solid white');\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: values => {\n      dispatch(register(values));\n    },\n  });\n  return (\n    <>\n      <Text fontSize={'xl'} textAlign={'center'} mt={2}>\n        Create new User\n      </Text>\n      <Flex bg=\"dark\" align=\"center\" justify=\"center\" mt={3}>\n        <Box bg=\"dark\" p={6} rounded=\"lg\" w={500} border={border}>\n          <form onSubmit={formik.handleSubmit}>\n            <VStack spacing={4} align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\">Name</FormLabel>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"name\"\n                  variant=\"filled\"\n                  onChange={formik.handleChange}\n                  value={formik.values.name}\n                  border=\"1px solid white \"\n                  _focus={{ border: '1px solid #d5a6bd' }}\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  variant=\"filled\"\n                  onChange={formik.handleChange}\n                  value={formik.values.email}\n                  border=\"1px solid white \"\n                  _focus={{ border: '1px solid #d5a6bd' }}\n                  required\n                />\n              </FormControl>\n              <FormControl>\n                <FormLabel htmlFor=\"password\">Password</FormLabel>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  variant=\"filled\"\n                  onChange={formik.handleChange}\n                  value={formik.values.password}\n                  border=\"1px solid white \"\n                  _focus={{ border: '1px solid #d5a6bd' }}\n                  pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$\"\n                  title=\"Password must contain at least one lowercase letter,one uppercase letter,one digit.Minimum length of 8 characters\"\n                  required\n                />\n              </FormControl>\n\n              <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                Create User\n              </Button>\n            </VStack>\n          </form>\n        </Box>\n      </Flex>\n      <Toaster position=\"top-right\" />\n    </>\n  );\n};\n\nexport default Register;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n"],"names":["dispatch","useDispatch","border","useColorModeValue","formik","useFormik","initialValues","name","email","password","onSubmit","values","register","fontSize","textAlign","mt","bg","align","justify","p","rounded","w","handleSubmit","spacing","htmlFor","I","id","type","variant","onChange","handleChange","value","_focus","pattern","title","required","colorScheme","width","position","props","forwardRef","direction","wrap","basis","grow","shrink","rest","styles","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","div","__css","Flex","chakra"],"sourceRoot":""}